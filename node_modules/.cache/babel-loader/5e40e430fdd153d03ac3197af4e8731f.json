{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport { IonicNativePlugin, cordova } from '@ionic-native/core';\n\nvar NativeGeocoderOriginal =\n/** @class */\nfunction (_super) {\n  __extends(NativeGeocoderOriginal, _super);\n\n  function NativeGeocoderOriginal() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n\n  NativeGeocoderOriginal.prototype.reverseGeocode = function (latitude, longitude, options) {\n    return cordova(this, \"reverseGeocode\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  NativeGeocoderOriginal.prototype.forwardGeocode = function (addressString, options) {\n    return cordova(this, \"forwardGeocode\", {\n      \"callbackOrder\": \"reverse\"\n    }, arguments);\n  };\n\n  NativeGeocoderOriginal.pluginName = \"NativeGeocoder\";\n  NativeGeocoderOriginal.plugin = \"cordova-plugin-nativegeocoder\";\n  NativeGeocoderOriginal.pluginRef = \"nativegeocoder\";\n  NativeGeocoderOriginal.repo = \"https://github.com/sebastianbaar/cordova-plugin-nativegeocoder\";\n  NativeGeocoderOriginal.platforms = [\"iOS\", \"Android\"];\n  return NativeGeocoderOriginal;\n}(IonicNativePlugin);\n\nvar NativeGeocoder = new NativeGeocoderOriginal();\nexport { NativeGeocoder };","map":{"version":3,"sources":["../../../../src/@ionic-native/plugins/native-geocoder/index.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AACA,SAAO,iBAAP,EAAO,OAAP,QAAmD,oBAAnD;;;;;AAwCoC,EAAA,SAAA,CAAA,sBAAA,EAAiB,MAAjB,CAAA;;;;;;AAWlC,EAAA,sBAAA,CAAA,SAAA,CAAA,cAAA,GAAc,UACI,QADJ,EAEZ,SAFY,EAGmB,OAHnB,EAGmB;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,gBAAA,EAAA;AAAA,uBAAA;AAAA,KAAA,EAAA,SAAA,CAAA;AAAA,GAHjC;;AAiBA,EAAA,sBAAA,CAAA,SAAA,CAAA,cAAA,GAAc,UAAC,aAAD,EAAuD,OAAvD,EAAuD;AAAA,WAAA,OAAA,CAAA,IAAA,EAAA,gBAAA,EAAA;AAAA,uBAAA;AAAA,KAAA,EAAA,SAAA,CAAA;AAAA,GAArE;;;;;;;SArEF,sB;EAyCoC,iB;;IAAvB,cAAA,GAAA,IAAc,sBAAd,E","sourcesContent":["import { Injectable } from '@angular/core';\nimport { Cordova, IonicNativePlugin, Plugin } from '@ionic-native/core';\n\n/**\n * @name Native Geocoder\n * @description\n * Cordova plugin for native forward and reverse geocoding\n *\n * @usage\n * ```typescript\n * import { NativeGeocoder, NativeGeocoderResult, NativeGeocoderOptions } from '@ionic-native/native-geocoder/ngx';\n *\n * constructor(private nativeGeocoder: NativeGeocoder) { }\n *\n * ...\n *\n * let options: NativeGeocoderOptions = {\n *     useLocale: true,\n *     maxResults: 5\n * };\n *\n * this.nativeGeocoder.reverseGeocode(52.5072095, 13.1452818, options)\n *   .then((result: NativeGeocoderResult[]) => console.log(JSON.stringify(result[0])))\n *   .catch((error: any) => console.log(error));\n *\n * this.nativeGeocoder.forwardGeocode('Berlin', options)\n *   .then((result: NativeGeocoderResult[]) => console.log('The coordinates are latitude=' + result[0].latitude + ' and longitude=' + result[0].longitude))\n *   .catch((error: any) => console.log(error));\n * ```\n * @interfaces\n * NativeGeocoderResult\n * NativeGeocoderOptions\n */\n@Plugin({\n  pluginName: 'NativeGeocoder',\n  plugin: 'cordova-plugin-nativegeocoder',\n  pluginRef: 'nativegeocoder',\n  repo: 'https://github.com/sebastianbaar/cordova-plugin-nativegeocoder',\n  platforms: ['iOS', 'Android'],\n})\n@Injectable()\nexport class NativeGeocoder extends IonicNativePlugin {\n  /**\n   * Reverse geocode a given latitude and longitude to find location address\n   * @param latitude {number} The latitude\n   * @param longitude {number} The longitude\n   * @param options {NativeGeocoderOptions} The options\n   * @return {Promise<NativeGeocoderResult[]>}\n   */\n  @Cordova({\n    callbackOrder: 'reverse',\n  })\n  reverseGeocode(\n    latitude: number,\n    longitude: number,\n    options?: NativeGeocoderOptions\n  ): Promise<NativeGeocoderResult[]> {\n    return;\n  }\n\n  /**\n   * Forward geocode a given address to find coordinates\n   * @param addressString {string} The address to be geocoded\n   * @param options {NativeGeocoderOptions} The options\n   * @return {Promise<NativeGeocoderResult[]>}\n   */\n  @Cordova({\n    callbackOrder: 'reverse',\n  })\n  forwardGeocode(addressString: string, options?: NativeGeocoderOptions): Promise<NativeGeocoderResult[]> {\n    return;\n  }\n}\n\n/**\n * Encapsulates format information about a geocoding result.\n * more Info:\n *  - https://developer.apple.com/documentation/corelocation/clplacemark\n *  - https://developer.android.com/reference/android/location/Address.html\n */\nexport interface NativeGeocoderResult {\n  /**\n   * The latitude.\n   */\n  latitude: string;\n  /**\n   * The longitude.\n   */\n  longitude: string;\n  /**\n   * The country code.\n   */\n  countryCode: string;\n  /**\n   * The country name.\n   */\n  countryName: string;\n  /**\n   * The postal code.\n   */\n  postalCode: string;\n  /**\n   * The administrativeArea.\n   */\n  administrativeArea: string;\n  /**\n   * The subAdministrativeArea.\n   */\n  subAdministrativeArea: string;\n  /**\n   * The locality.\n   */\n  locality: string;\n  /**\n   * The subLocality.\n   */\n  subLocality: string;\n  /**\n   * The thoroughfare.\n   */\n  thoroughfare: string;\n  /**\n   * The subThoroughfare.\n   */\n  subThoroughfare: string;\n  /**\n   * The areasOfInterest\n   */\n  areasOfInterest: string[];\n}\n\n/**\n * Options for reverse and forward geocoding.\n */\nexport interface NativeGeocoderOptions {\n  /**\n   * The locale to use when returning the address information.\n   * If set to 'false' the locale will always be 'en_US'.\n   * Default is 'true'\n   */\n  useLocale: boolean;\n  /**\n   * The default locale to use when returning the address information.\n   * e.g.: 'fa-IR' or 'de_DE'.\n   */\n  defaultLocale?: string;\n  /**\n   * The maximum number of result to return (max is 5).\n   * Default is 1\n   */\n  maxResults: number;\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}