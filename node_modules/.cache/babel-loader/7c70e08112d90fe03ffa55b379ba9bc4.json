{"ast":null,"code":"var _jsxFileName = \"D:\\\\Codeworld\\\\ionic-apps\\\\donortab\\\\src\\\\components\\\\GeolocationButton.tsx\";\nimport { Geolocation } from '@ionic-native/geolocation';\nimport { IonButton, IonLoading, IonToast } from '@ionic/react';\nimport React, { useState } from 'react';\n\nconst GeolocationButton = () => {\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState({\n    showError: false\n  });\n  const [position, setPosition] = useState();\n  const [locateres, setLocateres] = useState();\n\n  const getLocation = async () => {\n    setLoading(true);\n\n    try {\n      const position = await Geolocation.getCurrentPosition();\n      setPosition(position);\n      setLoading(false);\n      setError({\n        showError: false\n      });\n      const latitudefetch = position.coords.latitude;\n      const longitudefetch = position.coords.longitude;\n      console.log(latitudefetch);\n      console.log(longitudefetch);\n    } catch (e) {\n      setError({\n        showError: true,\n        message: e.message\n      });\n      setLoading(false);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement(IonLoading, {\n    isOpen: loading,\n    onDidDismiss: () => setLoading(false),\n    message: 'Getting Location...',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(IonToast, {\n    isOpen: error.showError,\n    onDidDismiss: () => setError({\n      message: \"\",\n      showError: false\n    }),\n    message: error.message,\n    duration: 3000,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }), /*#__PURE__*/React.createElement(IonButton, {\n    expand: \"block\",\n    color: \"secondary\",\n    onClick: getLocation,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 13\n    }\n  }, position ? `${position.coords.latitude} ${position.coords.longitude}` : \"Get Location\"));\n};\n\nexport default GeolocationButton;","map":{"version":3,"sources":["D:/Codeworld/ionic-apps/donortab/src/components/GeolocationButton.tsx"],"names":["Geolocation","IonButton","IonLoading","IonToast","React","useState","GeolocationButton","loading","setLoading","error","setError","showError","position","setPosition","locateres","setLocateres","getLocation","getCurrentPosition","latitudefetch","coords","latitude","longitudefetch","longitude","console","log","e","message"],"mappings":";AAAA,SAASA,WAAT,QAAuC,2BAAvC;AAGA,SAASC,SAAT,EAAoBC,UAApB,EAAgCC,QAAhC,QAAgD,cAAhD;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAA6C,OAA7C;;AAUA,MAAMC,iBAA2B,GAAG,MAAM;AACtC,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBH,QAAQ,CAAU,KAAV,CAAtC;AACA,QAAM,CAACI,KAAD,EAAQC,QAAR,IAAoBL,QAAQ,CAAgB;AAAEM,IAAAA,SAAS,EAAE;AAAb,GAAhB,CAAlC;AACA,QAAM,CAACC,QAAD,EAAWC,WAAX,IAA0BR,QAAQ,EAAxC;AACA,QAAM,CAACS,SAAD,EAAWC,YAAX,IAAyBV,QAAQ,EAAvC;;AAGA,QAAMW,WAAW,GAAG,YAAY;AAC5BR,IAAAA,UAAU,CAAC,IAAD,CAAV;;AAGA,QAAI;AACA,YAAMI,QAAQ,GAAG,MAAMZ,WAAW,CAACiB,kBAAZ,EAAvB;AAEAJ,MAAAA,WAAW,CAACD,QAAD,CAAX;AACAJ,MAAAA,UAAU,CAAC,KAAD,CAAV;AACAE,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,SAAS,EAAE;AAAb,OAAD,CAAR;AACA,YAAMO,aAAa,GAACN,QAAQ,CAACO,MAAT,CAAgBC,QAApC;AACA,YAAMC,cAAc,GAACT,QAAQ,CAACO,MAAT,CAAgBG,SAArC;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYN,aAAZ;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYH,cAAZ;AAEH,KAXD,CAWE,OAAOI,CAAP,EAAU;AACRf,MAAAA,QAAQ,CAAC;AAAEC,QAAAA,SAAS,EAAE,IAAb;AAAmBe,QAAAA,OAAO,EAAED,CAAC,CAACC;AAA9B,OAAD,CAAR;AACAlB,MAAAA,UAAU,CAAC,KAAD,CAAV;AACH;AACJ,GAnBD;;AAqBA,sBAEI,uDACI,oBAAC,UAAD;AACI,IAAA,MAAM,EAAED,OADZ;AAEI,IAAA,YAAY,EAAE,MAAMC,UAAU,CAAC,KAAD,CAFlC;AAGI,IAAA,OAAO,EAAE,qBAHb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,eAMI,oBAAC,QAAD;AACI,IAAA,MAAM,EAAEC,KAAK,CAACE,SADlB;AAEI,IAAA,YAAY,EAAE,MAAMD,QAAQ,CAAC;AAAEgB,MAAAA,OAAO,EAAE,EAAX;AAAef,MAAAA,SAAS,EAAE;AAA1B,KAAD,CAFhC;AAGI,IAAA,OAAO,EAAEF,KAAK,CAACiB,OAHnB;AAII,IAAA,QAAQ,EAAE,IAJd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANJ,eAYI,oBAAC,SAAD;AAAW,IAAA,MAAM,EAAC,OAAlB;AAA0B,IAAA,KAAK,EAAC,WAAhC;AAA4C,IAAA,OAAO,EAAEV,WAArD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAmEJ,QAAQ,GAAI,GAAEA,QAAQ,CAACO,MAAT,CAAgBC,QAAS,IAAGR,QAAQ,CAACO,MAAT,CAAgBG,SAAU,EAA5D,GAAgE,cAA3I,CAZJ,CAFJ;AAiBH,CA7CD;;AA+CA,eAAehB,iBAAf","sourcesContent":["import { Geolocation,Geoposition} from '@ionic-native/geolocation';\r\n\r\nimport { NativeGeocoder, NativeGeocoderResult, NativeGeocoderOptions } from '@ionic-native/native-geocoder/ngx';\r\nimport { IonButton, IonLoading, IonToast } from '@ionic/react';\r\nimport React, { useState, constructor } from 'react';\r\n\r\ninterface LocationError {\r\n    showError: boolean;\r\n    message?: string;\r\n}\r\n\r\n\r\n\r\n\r\nconst GeolocationButton: React.FC = () => {\r\n    const [loading, setLoading] = useState<boolean>(false);\r\n    const [error, setError] = useState<LocationError>({ showError: false });\r\n    const [position, setPosition] = useState<Geoposition>();\r\n    const [locateres,setLocateres]=useState<NativeGeocoderResult>();\r\n\r\n\r\n    const getLocation = async () => {\r\n        setLoading(true);\r\n        \r\n\r\n        try {\r\n            const position = await Geolocation.getCurrentPosition();\r\n            \r\n            setPosition(position);\r\n            setLoading(false);\r\n            setError({ showError: false });\r\n            const latitudefetch=position.coords.latitude;\r\n            const longitudefetch=position.coords.longitude;\r\n            console.log(latitudefetch);\r\n            console.log(longitudefetch);\r\n            \r\n        } catch (e) {\r\n            setError({ showError: true, message: e.message });\r\n            setLoading(false);\r\n        }\r\n    }\r\n\r\n    return (\r\n        \r\n        <>\r\n            <IonLoading\r\n                isOpen={loading}\r\n                onDidDismiss={() => setLoading(false)}\r\n                message={'Getting Location...'}\r\n            />\r\n            <IonToast\r\n                isOpen={error.showError}\r\n                onDidDismiss={() => setError({ message: \"\", showError: false })}\r\n                message={error.message}\r\n                duration={3000}\r\n            />\r\n            <IonButton expand=\"block\" color=\"secondary\" onClick={getLocation}>{position ? `${position.coords.latitude} ${position.coords.longitude}` : \"Get Location\"}</IonButton>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default GeolocationButton;"]},"metadata":{},"sourceType":"module"}